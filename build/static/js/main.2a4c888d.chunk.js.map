{"version":3,"sources":["components/gallery.js","components/global.js","serviceWorker.js","index.js"],"names":["Gallery","react_default","a","createElement","Container","className","Row","this","props","items","map","item","index","_item$volumeInfo","volumeInfo","title","imageLinks","infoLink","description","Col","sm","md","key","href","target","src","undefined","thumbnail","alt","Component","Global","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchquery","_this2","fetch","concat","method","then","response","json","console","log","setState","_this3","InputGroup","Input","type","placeholder","onChange","e","value","onKeyPress","search","InputGroupAddon","addonType","onClick","InputGroupText","role","gallery","Boolean","window","location","hostname","match","ReactDOM","render","global","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAoCeA,mLA9BP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAY,WACnBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAEQC,KAAKC,MAAMC,MAAMC,IAAI,SAACC,EAAMC,GAAU,IAAAC,EACiBF,EAAKG,WAAlDC,EAD4BF,EAC5BE,MAAOC,EADqBH,EACrBG,WAAYC,EADSJ,EACTI,SADSJ,EACCK,YACnC,OAEIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACfpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOiB,IAAKV,GACvBX,EAAAC,EAAAC,cAAA,KAAGoB,KAAMN,EAAWO,OAAO,SACvBvB,EAAAC,EAAAC,cAAA,OACIsB,SAAoBC,IAAfV,EAA2BA,EAAWW,UAb5D,2DAciBC,IAAI,gBAER3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAaU,iBAlB9Cc,aC8CPC,cA7CX,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMC,KACD6B,MAAQ,CACTC,YAAY,GACZ7B,MAAO,IAJIsB,wEAQV,IAAAQ,EAAAhC,KAENiC,MAAK,GAAAC,OADO,kDACPA,OAAUlC,KAAK8B,MAAMC,aAAe,CAACI,OAAQ,QACjDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACFC,QAAQC,IAAIF,GADF,IAELpC,EAASoC,EAATpC,MACL8B,EAAKS,SAAS,CAACvC,YAEnBqC,QAAQC,IAAIxC,KAAK8B,MAAMC,8CAEjB,IAAAW,EAAA1C,KACL,OAEIN,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,iBACAJ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAY7C,UAAY,eACpBJ,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,oBAAoBhD,UAAU,QAC3DiD,SAAY,SAAAC,GAAC,OAAIN,EAAKD,SAAS,CAACV,YAAciB,EAAE/B,OAAOgC,SACvDC,WAAe,SAACF,GACC,UAAVA,EAAEjC,KACH2B,EAAKS,YAKbzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAiBC,UAAU,SAASC,QAAY,kBAAMZ,EAAKS,WACvDzD,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,SAAiB7D,EAAAC,EAAAC,cAAA,QAAM4D,KAAK,OAAX,kBAAjB,OAGR9D,EAAAC,EAAAC,cAAC6D,EAAD,CAASvD,MAAQF,KAAK8B,MAAM5B,gBAvCvBoB,aCSDoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACLtE,EAAAC,EAAAC,cAACqE,EAAD,MAAYC,SAASC,eAAe,QD0HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.2a4c888d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass Gallery extends Component {\r\n    render() {\r\n        let alternateImg = 'https://www.unesale.com/ProductImages/Large/notfound.png'\r\n        return (\r\n            <Container className = \"gallery\">\r\n                <Row>\r\n                    {\r\n                        this.props.items.map((item, index) => {\r\n                            let { title, imageLinks, infoLink, description } = item.volumeInfo;\r\n                            return (\r\n\r\n                                <Col sm=\"6\" md=\"3\">\r\n                                <div className=\"book\" key={index}>\r\n                                    <a href={infoLink}  target=\"blank\" >\r\n                                        <img\r\n                                            src={imageLinks !== undefined ? imageLinks.thumbnail : alternateImg}\r\n                                            alt=\" book cover\"\r\n                                        />\r\n                                        <div className=\"bookTitle\">{title}</div>\r\n                                    </a>\r\n                                </div>    \r\n                                </Col>\r\n\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport { Container, InputGroup, InputGroupText, InputGroupAddon, Input, } from 'reactstrap';\r\nimport Gallery from './gallery'\r\nclass Global extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchquery:'',\r\n            items: []  \r\n        }\r\n    }\r\n    \r\n    search() {\r\n       const url = 'https://www.googleapis.com/books/v1/volumes?q=';\r\n       fetch(`${url}${this.state.searchquery}`, {method: 'GET'})\r\n       .then(response => response.json())\r\n       .then(json => {\r\n           console.log(json);\r\n           let {items} = json;\r\n           this.setState({items});\r\n       });\r\n       console.log(this.state.searchquery);\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <Container>\r\n                <h1 className=\"title\"> BOOK XPLORER</h1>\r\n                <InputGroup className = \"searchInput\">\r\n                    <Input type=\"text\" placeholder=\"Search for a Book\" className=\"input\"\r\n                      onChange = {e => this.setState({searchquery : e.target.value})}\r\n                      onKeyPress = { (e) => {\r\n                        if ( e.key === 'Enter'){\r\n                            this.search(); \r\n                        }\r\n                      }\r\n                    }\r\n                    />\r\n                    <InputGroupAddon addonType=\"append\" onClick = { () => this.search()}>\r\n                        <InputGroupText> <span role=\"img\"> üîç </span> </InputGroupText>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n                <Gallery items= {this.state.items}></Gallery>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Global;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Global from './components/global';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Global/> , document.getElementById('app')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}